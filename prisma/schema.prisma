// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  lastLogin DateTime? @map("last_login")

  // Relations
  goals                   Goal[]
  organizationStructures OrganizationStructure[]
  permitPlannings        PermitPlanning[]
  aaApprovals            PermitPlanning[] @relation("AAApprovals")
  scApprovals            PermitPlanning[] @relation("SCApprovals")
  rejections             PermitPlanning[] @relation("Rejections")

  @@map("users")
}

// Goal model
model Goal {
  id          Int        @id @default(autoincrement())
  title       String     @db.VarChar(255)
  description String?    @db.Text
  status      GoalStatus @default(PENDING)
  userId      Int        @map("user_id")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

// Permit Planning model
model PermitPlanning {
  id               Int      @id @default(autoincrement())
  permitNumber     String?  @map("permit_number") @db.VarChar(100)
  workDescription  String   @map("work_description") @db.Text
  workLocation     String   @map("work_location") @db.VarChar(255)
  
  // Location details based on site plan
  locationCode     String?  @map("location_code") @db.VarChar(10) // PRC, UTL, BLD, etc.
  areaName         String?  @map("area_name") @db.VarChar(100)
  coordinates      String?  @db.Text // JSON string for x,y coordinates
  zone             LocationZone?
  
  // Permit details
  workType         WorkType?
  riskLevel        RiskLevel @default(LOW)
  startDate        DateTime @map("start_date")
  endDate          DateTime @map("end_date")
  
  // Personnel information (Performing Authority)
  performingAuthority String?  @map("performing_authority") @db.VarChar(255)
  company          String?  @db.VarChar(255)
  areaAuthority    String?  @map("area_authority") @db.VarChar(255)
  siteControllerName String? @map("site_controller_name") @db.VarChar(255)
  
  // Legacy fields (for backward compatibility)
  contractor       String?  @db.VarChar(255)
  supervisor       String?  @db.VarChar(255)
  
  // Safety requirements
  ppeRequired      String?  @map("ppe_required") @db.Text
  safetyMeasures   String?  @map("safety_measures") @db.Text
  emergencyContact String?  @map("emergency_contact") @db.VarChar(255)
  relatedDocuments String?  @map("related_documents") @db.Text // JSON string
  
  // Status
  status           PermitStatus @default(DRAFT)
  
  // Approval tracking
  aaApprovedBy     Int?      @map("aa_approved_by")
  aaApprovedAt     DateTime? @map("aa_approved_at")
  aaComments       String?   @map("aa_comments") @db.Text
  
  scApprovedBy     Int?      @map("sc_approved_by")
  scApprovedAt     DateTime? @map("sc_approved_at")
  scComments       String?   @map("sc_comments") @db.Text
  
  rejectedBy       Int?      @map("rejected_by")
  rejectedAt       DateTime? @map("rejected_at")
  rejectionReason  String?   @map("rejection_reason") @db.Text
  
  // Legacy approval fields (for backward compatibility)
  approvedBy       String?  @map("approved_by") @db.VarChar(255)
  approvedAt       DateTime? @map("approved_at")
  
  userId           Int      @map("user_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  aaApprover User? @relation("AAApprovals", fields: [aaApprovedBy], references: [id])
  scApprover User? @relation("SCApprovals", fields: [scApprovedBy], references: [id])
  rejector   User? @relation("Rejections", fields: [rejectedBy], references: [id])

  @@map("permit_planning")
}

// Organization Structure model
model OrganizationStructure {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  position   String?  @db.VarChar(255)
  department String?  @db.VarChar(255)
  parentId   Int?     @map("parent_id")
  userId     Int      @map("user_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  user     User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   OrganizationStructure?  @relation("OrganizationHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children OrganizationStructure[] @relation("OrganizationHierarchy")

  @@map("organization_structure")
}

// Enums
enum Role {
  ADMIN
  USER
  PTWC     // Permit to Work Controller - membuat permit
  AA       // Area Authority - approve permit
  SC       // Site Controller - approve permit

  @@map("role")
}

enum GoalStatus {
  PENDING
  IN_PROGRESS
  COMPLETED

  @@map("goal_status")
}

enum LocationZone {
  PRC  // Processing/Production Area
  UTL  // Utilities Area
  BLD  // Building/Office Area
  GMS  // Gas Metering Station
  CCR  // Central Control Room
  OY   // Open Yard
  NBL  // New Building/Laboratory
  WS   // Workshop/Warehouse
  
  @@map("location_zone")
}

enum WorkType {
  COLD_WORK           // Cold Work (pin biru)
  COLD_WORK_BREAKING  // Cold Work - breaking containment (pin hitam)
  HOT_WORK_SPARK      // Hot work - spark potential (pin kuning)
  HOT_WORK_FLAME      // Hot work - naked flame (pin merah)
  
  @@map("work_type")
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  
  @@map("risk_level")
}

enum PermitStatus {
  DRAFT
  SUBMITTED           // Submit oleh PTWC
  PENDING_AA_APPROVAL // Menunggu approval dari AA
  PENDING_SC_APPROVAL // Menunggu approval dari SC (setelah AA approve)
  AA_APPROVED         // Disetujui oleh AA, menunggu SC
  FULLY_APPROVED      // Disetujui oleh AA dan SC
  REJECTED_BY_AA      // Ditolak oleh AA
  REJECTED_BY_SC      // Ditolak oleh SC
  ACTIVE              // Permit aktif (tampil di site plot)
  COMPLETED
  CANCELLED
  
  @@map("permit_status")
}
